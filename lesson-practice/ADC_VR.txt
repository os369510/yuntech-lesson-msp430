

#include "msp430x54xA.h"
#define RSPIN   (0x04)           //P11.2
#define RWPIN   (0x02)           //P11.1
#define EPIN    (0x01)           //P11.0


unsigned char XPOS,YPOS;
char str[]="                       ";
float  a;
volatile unsigned int results,results0,results1,results2,results3;           
void delay(unsigned int t)         //延時副程式
{  unsigned int i,j;
   for(i=0;i<t;i++)
      for(j=0;j<10;j++) ;        
}

void lcdwaitidle(void)             
{  P10DIR=0x00;
   P11OUT &=~RSPIN;
   P11OUT |=RWPIN;
   P11OUT |=EPIN;
   while((P10IN&0x80)==0x80);
   P11OUT &=~EPIN;
   P10DIR |=0Xff;
}

void lcdwcn(unsigned char c)
{  P11OUT &=~RSPIN;
   P11OUT &=~RWPIN;
   P10OUT=c;
   P11OUT |=EPIN;
   _NOP();
   P11OUT &=~EPIN;
}

void lcdwc(unsigned char c)
{  lcdwaitidle();
   lcdwcn(c);
}

void lcdwd(unsigned char d)
{  lcdwaitidle();
   P11OUT |=RSPIN;
   P11OUT &=~RWPIN;
   P10OUT=d;
   P11OUT |=EPIN;
   _NOP();
   P11OUT &=~EPIN;
}

void lcdpos(void)
{  XPOS&=0x0f;
   YPOS&=0x03;
   if(YPOS==0x00)
      lcdwc(XPOS|0x80);
   else if(YPOS==0x01)
      lcdwc((XPOS+0x40)|0x80);
}

void lcdreset()
{  delay(150); lcdwcn(0x38);
   delay(50); lcdwcn(0x38);
   delay(50); lcdwcn(0x38);
   lcdwc(0x38);
   lcdwc(0x08);
   lcdwc(0x01);
   lcdwc(0x06);
   lcdwc(0x0c);
}

void lcdfill(unsigned char n)
{
   for(YPOS=0;YPOS<2;YPOS++)
      for(XPOS=0;XPOS<9;XPOS++)             //Xpos=16
      {  lcdpos();
         lcdwd(n);  }
}

void lcdwda(unsigned char x,unsigned char y,unsigned char *s) //字串副程式
{  YPOS=y;
   for(XPOS=x;XPOS<16;XPOS++)
   {  lcdpos();
      lcdwd(*s);
      s++;                                                    //儲存位置+1(讀取下一個字
      delay(400);
   }
}

void main(void)
{  unsigned char i;
   WDTCTL = WDTPW + WDTHOLD;    
     P9DIR |= BIT6+BIT7;
   P9DS |=BIT6+BIT7;
   P9OUT &=~BIT7; //K
   P9OUT |= BIT6; //A
   //
   P10OUT =0;
   P11OUT =0;
   P10DIR |=0XFF;
   P11DIR |=0XFF;
   P11OUT &=~EPIN; 
   lcdreset();
   REFCTL0 &= ~REFMSTR;
   ADC12CTL0 = ADC12ON+ADC12SHT02+ADC12REFON+ADC12REF2_5V;
                                                        // Internal ref = 2.5V
    ADC12CTL1 = ADC12SHP;         // enable sample timer
    ADC12CTL2 = ADC12RES_2+ADC12REFOUT; //12BIT,REF OUT continuous
    ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_15;  // ADC i/p ch A15 
    ADC12IE = 0x001;                          // ADC_IFG upon conv result-ADCMEMO
    __delay_cycles(35);                       // 35us delay to allow Ref to settle
                                                           // based on default DCO frequency.
                                                           // See Datasheet for typical settle time.
  P5SEL |= BIT0;                            // REF out
  ADC12CTL0 |= ADC12ENC;

  for(XPOS=0;XPOS<16;XPOS++)             //Xpos=16
       {  
       lcdpos();               lcdwd(' ');
      }
  while(1)
  {
    ADC12CTL0 |= ADC12SC;                   // Start convn - software trigger
    __bis_SR_register(LPM4_bits + GIE);     // Enter LPM4, Enable interrupts
   }
}


#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                     // Vector  6:  ADC12IFG0
  
       results = ADC12MEM0;                    // Move results, IFG is cleared
       __bic_SR_register_on_exit(LPM4_bits);   // Exit active CPU, SET BREAKPOINT HERE
       
       a=(((float)results)/4095)*2.5+0.00005;
       str[5] = (int)(a*10000)%10+'0';
       str[4] = (int)(a*1000)%10+'0';
       str[3] = (int)(a*100)%10+'0';
       str[2] = (int)(a*10)%10+'0';
       str[1] = '.';
       str[0] = (int) a%10+'0';
       lcdwda(0,0,str);
           
  /*     for(XPOS=0;XPOS<16;XPOS++)             //Xpos=16
       {
       lcdpos();                              //指定位置
       if(XPOS==0)  lcdwd( results3);             //控制輸出
       if(XPOS==1)  lcdwd( results2);
       if(XPOS==2)  lcdwd( results1);
       if(XPOS==3)  lcdwd( results0); 
       if((XPOS==2)||(XPOS==5))  lcdwd(':');
       if(XPOS==3)  lcdwd(minh);
       if(XPOS==4) lcdwd(minl);
       if(XPOS==6) lcdwd(sech);
       if(XPOS==7) lcdwd(secl);
       if(XPOS>=8) lcdwd(' '); */
      
  case  8: break;                                  // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break; 
  }  
}
