#include "msp430x54x.h"

volatile unsigned int results;           

void main(void)
{
  WDTCTL = WDTPW+WDTHOLD;
  ADC12CTL0 = ADC12ON+ADC12SHT02+ADC12REFON+ADC12REF2_5V;
                                                        // Internal ref = 2.5V
  ADC12CTL1 = ADC12SHP;         // enable sample timer
  ADC12CTL2 = ADC12RES_2+ADC12REFOUT; //12BIT,REF OUT continuous
  ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_15;  // ADC i/p ch A15 
  ADC12IE = 0x001;                          // ADC_IFG upon conv result-ADCMEMO
  __delay_cycles(35);                       // 35us delay to allow Ref to settle
                                                           // based on default DCO frequency.
                                                           // See Datasheet for typical settle time.
  P5SEL |= BIT0;                            // REF out
  ADC12CTL0 |= ADC12ENC;
  while(1)
  {
    ADC12CTL0 |= ADC12SC;                   // Start convn - software trigger
    
    __bis_SR_register(LPM4_bits + GIE);     // Enter LPM4, Enable interrupts
   }
}

#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                     // Vector  6:  ADC12IFG0
  
       results = ADC12MEM0;                    // Move results, IFG is cleared
      __bic_SR_register_on_exit(LPM4_bits);   // Exit active CPU, SET BREAKPOINT HERE
  case  8: break;                                  // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break; 
  }  
}